"                Setting                "
set nocompatible
set nu
set fencs=utf-8,euc-kr,cp949,cp932,euc-jp,shift-jis,big5,latin1,ucs-2le
set enc=UTF-8
set ai
set incsearch
set hlsearch
set noexpandtab
set nowrap
set backspace=indent,eol,start
set t_Co=256
set rtp+=~/.vim/bundle/Vundle.vim
"set expandtab
set shiftwidth=4
set tabstop=4
set smartindent
set clipboard=unnamedplus
set redrawtime=10000

set tags=./tags,tags,../tags,../../tags,../../../tags,../../../../tags,../../../../../tags,../../../../../../tags,../../../../../../../tags,../../../../../../../../tags,../../../../../../../../../tags,../../../../../../../../../../tags,../../../../../../../../../../../tags


let &t_TI = ""
let &t_TE = ""

"                Keymap Setting                "
nmap <unique> <s-2> <Plug>NetrwRefresh
nmap <C-]> :tj <C-r><C-w><cr>
"nmap <S-H> :tabmove -1<cr>		   " move tab previous
"nmap <S-L> :tabmove +1<cr>		   " move tab next
"nmap <C-h> :tabprev<cr>             " previous tab
"nmap <C-j> :tabprev<cr>             " previous tab
"nmap <C-l> :tabnext<cr>             " next tab
"nmap <C-o> :let g:netrw_browse_split=0<cr>:tabnew ./<cr>           " create a new tab to now folder
"nmap <C-n> :tabnew<cr>              " create a new tab to new file
"nmap <C-d> :tabnew % <cr>:line(".")<cr>" create a new tab to now file

nmap <C-h> :bprevious<cr>             " previous tab
nmap <C-j> :bprevious<cr>             " previous tab
nmap <C-l> :bnext<cr>             " next tab
nmap <C-n> :enew<cr>              " create a new tab to new file

nmap <F6> Oprintf("%s():%d  \n", __FUNCTION__, __LINE__);<ESC>
nmap <F7> Oprintf("%s():%d -------------------------------------------------- \n", __FUNCTION__, __LINE__);<ESC>
nmap <F8> :TagbarToggle<CR>
nmap <F9> :w<cr>
nmap <C-k><Esc> :q!<cr>
nmap <C-k><C-n> :set nu!<cr>
nmap <C-k><C-x> :%!xxd<cr>
nmap <C-k><C-d> :%!xxd -r<cr>
nmap <C-k><C-o> :botright vnew ~/.vimrc<cr>
nmap <F5> :SyntasticToggleMode<cr>
nmap <F4> :SignifyToggle<cr>


"               Plugin Setting                "
filetype off
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'
Plugin 'vim-airline/vim-airline'		"밑 상태바
Plugin 'mhinz/vim-signify'				"svn, git과 다른 라인 표시
Plugin 'majutsushi/tagbar'				"Tag 파일 기준으로 변수, 함수이름 보여줌 (TagList 비슷)
Plugin 'posva/vim-vue'					"Vue syntax
Plugin 'alvan/vim-closetag'				"Auto close tag
Plugin 'vcscommand.vim'					"svn, git diff log 보기
Plugin 'bogado/file-line'				"vi file:line
Plugin 'joshdick/onedark.vim'
Plugin 'tomasr/molokai'
Plugin 'ayu-theme/ayu-vim-airline'
Plugin 'pangloss/vim-javascript'
Plugin 'othree/html5.vim'
Plugin 'mxw/vim-jsx'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'The-NERD-Tree'

call vundle#end()
filetype plugin indent on


" netrw

"let g:netrw_browse_split = 3
"let g:netrw_winsize = 13
"let g:netrw_banner = 0
"let g:netrw_liststyle = 3
"" Toggle Vexplore with Ctrl-E
"function! ToggleVExplorer()
"  if exists("t:expl_buf_num")
"      let expl_win_num = bufwinnr(t:expl_buf_num)
"	  close
"	  unlet t:expl_buf_num
"  else
"      Vexplore
"      let t:expl_buf_num = bufnr("%")
"  endif
"endfunction
"nmap <C-k><C-l> :let g_netrw_browse_split=3 <cr>:call ToggleVExplorer()<CR>

" NERD Tree
nmap <C-k><C-l> :NERDTreeToggle<CR>

"               Syntax Setting                "

if has("syntax")
        syntax on           " Default to no syntax highlightning
endif

"colorscheme desert
colorscheme onedark
"colorscheme candystripe
"colorscheme PaperColor

" For Neovim > 0.1.5 and Vim > patch 7.4.1799 - https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162
" Based on Vim patch 7.4.1770 (`guicolors` option) - https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd
" https://github.com/neovim/neovim/wiki/Following-HEAD#20160511
if (has('termguicolors'))
  set termguicolors
endif

" UltiSnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsEditSplit="vertical"


"               Airline Setting                "
set background=dark
let g:airline_theme='onedark'
" 버퍼 목록 켜기
let g:airline#extensions#tabline#enabled = 1
" 파일명만 출력
let g:airline#extensions#tabline#fnamemod = ':t'


"               Signify Setting                "
map <C-k><C-s> :SignifyToggle<cr>


"               Write Callback Setting                "

" 이전 수정 위치로 이동
autocmd BufReadPost *
			\ if line("'\"") > 0 && line("'\"") <= line("$") |
			\ exe "norm g`\"" |
			\ endif
autocmd BufWritePost * silent! execute "!~/.vim/vimrun" expand("%:p") "> /dev/null 2>&1"
"autocmd BufWritePost * execute "!~/.vim/vimrun" expand("%:p")

"                Tagbar Setting                "
let g:tagbar_left=0
map <C-k><C-t> :TagbarToggle<CR>




"                Closetag Setting                "
let g:closetag_filenames = '*.html,*.ejs,*.vue,*.svelte,*.jsx,*.tsx'
let g:closetag_filetypes = 'html,ejs,vue,svelte,react'


highlight ExtraWhitespace ctermbg=52
match ExtraWhitespace /\s\+$/
